@using System.Text.Json;
@model MainDashBord ;
@{
    Layout = null;
}

<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no" />
    <title>لوحة تحكم المتجر الإلكتروني</title>
    <style>
        * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        body {
        background: #f9fafb;
        color: #2d3748;
        line-height: 1.4;
        min-height: 100vh;
        display: flex;
        justify-content: center;
        padding: 10px;
        }
        .dashboard-container {
        background: #fff;
        width: 100%;
        max-width: 700px;
        border-radius: 15px;
        box-shadow: 0 8px 24px rgba(0,0,0,0.12);
        display: flex;
        flex-direction: column;
        overflow: hidden;
        }
        header {
        background: #2b6cb0;
        color: #fff;
        padding: 20px;
        text-align: center;
        font-size: 1.3rem;
        font-weight: 700;
        letter-spacing: 0.05em;
        }
        main {
        flex: 1;
        overflow-y: auto;
        padding: 15px;
        }
        .summary-cards {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 15px;
        margin-bottom: 20px;
        }
        .card {
        background: #e9f2fb;
        border-radius: 12px;
        padding: 15px;
        box-shadow: 0 2px 8px rgb(43 108 176 / 0.3);
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        }
        .card h3 {
        color: #2b6cb0;
        font-weight: 800;
        font-size: 1.1rem;
        margin-bottom: 6px;
        }
        .card p {
        font-size: 1.6rem;
        font-weight: 900;
        color: #1a202c;
        }
        .chart-container {
        background: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 8px rgba(43,108,176,0.2);
        padding: 10px 5px 20px 5px;
        margin-bottom: 20px;
        }
        .chart-container h3 {
        color: #2b6cb0;
        font-weight: 700;
        margin-bottom: 10px;
        font-size: 1.1rem;
        text-align: center;
        }
        .chart-container canvas {
        width: 100% !important;
        height: 200px !important;
        }
        .orders {
        background: #e9f2fb;
        border-radius: 12px;
        padding: 15px;
        box-shadow: 0 2px 8px rgb(43 108 176 / 0.3);
        }
        .orders h3 {
        color: #2b6cb0;
        margin-bottom: 12px;
        font-weight: 700;
        font-size: 1.1rem;
        }
        .order-list {
        max-height: 150px;
        overflow-y: auto;
        }
        .order-item {
        display: flex;
        justify-content: space-between;
        padding: 8px 8px;
        border-bottom: 1px solid #cbd5e0;
        font-size: 0.9rem;
        color: #1a202c;
        }
        .order-item:last-child {
        border-bottom: none;
        }
        .order-list::-webkit-scrollbar {
        width: 6px;
        }
        .order-list::-webkit-scrollbar-thumb {
        background-color: #2b6cb0;
        border-radius: 10px;
        }
        .order-list::-webkit-scrollbar-track {
        background: #dbe9f9;
        }
        footer {
        background: #2b6cb0;
        color: #fff;
        text-align: center;
        padding: 12px 10px;
        font-size: 0.85rem;
        }
        @@media (max-width: 400px) {
        .dashboard-container {
        border-radius: 10px;
        }
        header {
        font-size: 1.1rem;
        }
        }
    </style>
</head>
<body>
    <div class="dashboard-container" role="main" aria-label="لوحة تحكم المتجر الإلكتروني">
        <header>متجر إلكتروني - لوحة التحكم</header>
        <main>
            <section class="summary-cards" aria-label="ملخص الإحصائيات">
                <article class="card"><h3>المبيعات</h3><p id="total-sales">@Model.TotalSales</p></article>
                <article class="card"><h3>الطلبات</h3><p id="total-orders">@Model.TotalOrders</p></article>
                <article class="card"><h3>المنتجات</h3><p id="total-products">@Model.TotalProducts</p></article>
                <article class="card"><h3>العملاء</h3><p id="total-customers">@Model.TotalCustomers</p></article>
            </section>

            <section class="chart-container" aria-label="مخطط المبيعات الشهري">
                <h3>مبيعات الشهر</h3>
                <canvas id="salesChart" aria-describedby="salesChartDesc"></canvas>
                <p id="salesChartDesc" class="sr-only">مخطط خطي يظهر المبيعات لكل يوم في الشهر.</p>
            </section>

            <section class="orders" aria-label="الطلبات الحديثة">
                <h3>الطلبات الحديثة</h3>
                <div class="order-list" id="ordersList" tabindex="0" aria-live="polite" aria-relevant="additions"></div>
            </section>
        </main>
        <footer>&copy; 2024 جميع الحقوق محفوظة</footer>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
   @*  <script>
        // تصحيح تحويل البيانات الرقمية
        const summaryData = {
            sales: @Model.TotalSales,
            orders: @Model.TotalOrders,
            products: @Model.TotalProducts,
            customers: @Model.TotalCustomers
        };

        // بيانات المبيعات الشهرية
        const monthlySales = [@string.Join(", ", Model.salesPerDayForMonth.Select(d => d.Total))];

        // بيانات الطلبات من السيرفر
        const recentOrders = @Html.Raw(Json.Serialize(Model.ordersInfo));

        function formatCurrency(num) {
            return num.toLocaleString('ar-EG', {
                style: 'currency',
                currency: 'SAR',
                minimumFractionDigits: 2
            });
        }

        // تحديث القيم مع معالجة الأرقام
        document.getElementById('total-sales').textContent = formatCurrency(parseFloat(summaryData.sales));
        document.getElementById('total-orders').textContent = parseInt(summaryData.orders).toLocaleString();
        document.getElementById('total-products').textContent = parseInt(summaryData.products).toLocaleString();
        document.getElementById('total-customers').textContent = parseInt(summaryData.customers).toLocaleString();

        // عرض الطلبات
        const ordersList = document.getElementById('ordersList');
        recentOrders.forEach(order => {
            const orderDiv = document.createElement('div');
            orderDiv.className = 'order-item';
            orderDiv.innerHTML = `
                <span>#${order.id} - ${order.customer}</span>
                <span>${formatCurrency(order.total)}</span>
                <span>${order.status}</span>
            `;
            ordersList.appendChild(orderDiv);
        });

        // باقي كود الشارت بدون تعديل
        const ctx = document.getElementById('salesChart').getContext('2d');
        const salesChart = new Chart(ctx, {
            // ... [نفس محتوى الشارت الأصلي]
        });
    </script> *@
    <script>
        const summaryData = {
        sales: "@Model.TotalSales" ,
        orders: "@Model.TotalOrders",
        products: "@Model.TotalProducts",
        customers: "@Model.TotalCustomers"
        };

             const monthlySales = [
        @string.Join(", ", Model.salesPerDayForMonth.Select(d => d.Total))
        
        // const monthlySales = [
        //   1200, 1500, 1800, 2200, 2800, 2900, 3200, 3100, 3000, 3500,
        //   4000, 4200, 3800, 3600, 3300, 3400, 3700, 3900, 4100, 4400,
        //   4600, 4700, 4800, 4500, 4300, 4200, 4300, 4600, 4900, 5000
         ];

         const recentOrders = @Html.Raw(Json.Serialize(Model.ordersInfo));

        // const recentOrders =
        // [
        //   { id: '1001', customer: 'سعيد', total: 380.50, status: 'تم التوصيل' },
        //   { id: '1002', customer: 'نور', total: 120.00, status: 'قيد المعالجة' },
        //   { id: '1003', customer: 'فيصل', total: 220.75, status: 'تم الشحن' },
        //   { id: '1004', customer: 'هند', total: 99.99, status: 'تم التوصيل' },
        //   { id: '1005', customer: 'مريم', total: 75.60, status: 'قيد المعالجة' },
        //   { id: '1006', customer: 'راشد', total: 450.00, status: 'تم التوصيل' }
        // ];

        function formatCurrency(num) {
          // return num.toLocaleString('ar-EG', { style: 'currency', currency: 'SAR', minimumFractionDigits: 2 });
            return num.toLocaleString('ar-EG', {
                style: 'currency',
                currency: 'EGP', // تغيير العملة إلى EGP
                minimumFractionDigits: 2
            });
        }
        document.getElementById('total-sales').textContent = formatCurrency(summaryData.sales);
        document.getElementById('total-orders').textContent = summaryData.orders.toLocaleString();
        document.getElementById('total-products').textContent = summaryData.products.toLocaleString();
        document.getElementById('total-customers').textContent = summaryData.customers.toLocaleString();

        const ordersList = document.getElementById('ordersList');
        recentOrders.forEach(order => {
          const orderDiv = document.createElement('div');
          orderDiv.className = 'order-item';
          orderDiv.innerHTML = `
            <span>#${order.id} - ${order.customer}</span>
            <span>${formatCurrency(order.total)}</span>
            <span>${order.status}</span>
          `;
          ordersList.appendChild(orderDiv);
        });

        const ctx = document.getElementById('salesChart').getContext('2d');
        const salesChart = new Chart(ctx, {
          type: 'line',
          data: {
            labels: Array.from({length: monthlySales.length}, (_, i) => i + 1),
            datasets: [{
              label: 'المبيعات',
              data: monthlySales,
              borderColor: '#2b6cb0',
              backgroundColor: 'rgba(43,108,176,0.2)',
              fill: true,
              tension: 0.3,
              pointRadius: 3,
              pointHoverRadius: 6,
              borderWidth: 3,
              cubicInterpolationMode: 'monotone'
            }]
          },
          options: {
            responsive: true,
            maintainAspectRatio: false,
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  color: '#2b6cb0',
                  callback: function(value) {
                    return value / 1000 + ' ج.م';
                  }
                },
                grid: {
                  color: '#e2e8f0',
                }
              },
              x: {
                ticks: {color: '#2b6cb0'},
                grid: {display: false}
              }
            },
            plugins: {
              legend: {display: false}
            },
            interaction: {
              intersect: false,
              mode: 'index',
            }
          }
        });
    </script>
</body>
</html>
